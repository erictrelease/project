{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/erictrelease/project/blob/main/North%20Zone%20Prices(Interval%20Data).csv\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Ev1gB15YOkV"
      },
      "source": [
        "Fixed Pricing Model for chosen ESI ID."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 146,
      "metadata": {
        "id": "eqYo-Ix-Ypar"
      },
      "outputs": [],
      "source": [
        "# Import packages\n",
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.express as px\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 147,
      "metadata": {
        "id": "yZfYNdweYtur"
      },
      "outputs": [],
      "source": [
        "# Choose your location name, start date, and end date for analysis\n",
        "ESI_ID = '10443720000552311'\n",
        "location = 'TCC South' # Name of site where the ESI ID is from.\n",
        "year_start = '2022-04-02'\n",
        "year_end = '2024-03-31'\n",
        "\n",
        "# Choose Your Rate Code: K6-4CP. And enter its values.\n",
        "K6_4CP = {'Sum of Flat Charges $': 61.83,\n",
        "          'Sum of kWh Cost $': 0.0436731,\n",
        "          'Sum of Billed Demand Cost $': 4.0077170,\n",
        "          'Sum of 4CP Demand Cost $': 4.3962730,\n",
        "          'Sum of Tax Rates %': 2.1636667}\n",
        "K6_4CP = pd.Series(K6_4CP)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 148,
      "metadata": {
        "id": "QuDSl1yM1f5B"
      },
      "outputs": [],
      "source": [
        "# Import csv file\n",
        "site = pd.read_csv(f'{ESI_ID}.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 149,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "KT4CD_HH1YbJ",
        "outputId": "a1af9ab9-1043-421a-9d74-18f29c6d7d5d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 69992 entries, 0 to 69991\n",
            "Data columns (total 8 columns):\n",
            " #   Column                         Non-Null Count  Dtype  \n",
            "---  ------                         --------------  -----  \n",
            " 0   ESIID                          69992 non-null  object \n",
            " 1   USAGE_DATE                     69992 non-null  object \n",
            " 2   REVISION_DATE                  69992 non-null  object \n",
            " 3   USAGE_START_TIME               69992 non-null  object \n",
            " 4   USAGE_END_TIME                 69992 non-null  object \n",
            " 5   USAGE_KWH                      69984 non-null  float64\n",
            " 6   ESTIMATED_ACTUAL               69984 non-null  object \n",
            " 7   CONSUMPTION_SURPLUSGENERATION  69992 non-null  object \n",
            "dtypes: float64(1), object(7)\n",
            "memory usage: 4.3+ MB\n",
            "None\n",
            "\n",
            "The shape of the data frame is (69992, 8)\n",
            "\n",
            "The number of duplicate rows is: 2\n",
            "\n",
            "Columns sorted by number of missing values:\n",
            "USAGE_KWH                        8\n",
            "ESTIMATED_ACTUAL                 8\n",
            "ESIID                            0\n",
            "USAGE_DATE                       0\n",
            "REVISION_DATE                    0\n",
            "USAGE_START_TIME                 0\n",
            "USAGE_END_TIME                   0\n",
            "CONSUMPTION_SURPLUSGENERATION    0\n",
            "dtype: int64\n",
            "\n",
            "Missing values as a percentage of the length of the dataframe:\n",
            "USAGE_KWH                        0.000114\n",
            "ESTIMATED_ACTUAL                 0.000114\n",
            "ESIID                            0.000000\n",
            "USAGE_DATE                       0.000000\n",
            "REVISION_DATE                    0.000000\n",
            "USAGE_START_TIME                 0.000000\n",
            "USAGE_END_TIME                   0.000000\n",
            "CONSUMPTION_SURPLUSGENERATION    0.000000\n",
            "dtype: float64\n",
            "\n",
            "Here are the first 5 entries of our data:\n",
            "                 ESIID  USAGE_DATE        REVISION_DATE USAGE_START_TIME  \\\n",
            "0  '10443720000552311  04/02/2022  04/03/2022 07:16:59            00:00   \n",
            "1  '10443720000552311  04/02/2022  04/03/2022 07:16:59            00:15   \n",
            "2  '10443720000552311  04/02/2022  04/03/2022 07:16:59            00:30   \n",
            "3  '10443720000552311  04/02/2022  04/03/2022 07:16:59            00:45   \n",
            "4  '10443720000552311  04/02/2022  04/03/2022 07:16:59            01:00   \n",
            "\n",
            "  USAGE_END_TIME  USAGE_KWH ESTIMATED_ACTUAL CONSUMPTION_SURPLUSGENERATION  \n",
            "0          00:15     157.68                A                   Consumption  \n",
            "1          00:30     155.52                A                   Consumption  \n",
            "2          00:45     157.68                A                   Consumption  \n",
            "3          01:00     154.80                A                   Consumption  \n",
            "4          01:15     154.80                A                   Consumption  \n",
            "\n",
            "Here are the last 5 entries of our data:\n",
            "                     ESIID  USAGE_DATE        REVISION_DATE USAGE_START_TIME  \\\n",
            "69987  '10443720000552311  03/30/2024  03/31/2024 06:54:37            22:45   \n",
            "69988  '10443720000552311  03/30/2024  03/31/2024 06:54:37            23:00   \n",
            "69989  '10443720000552311  03/30/2024  03/31/2024 06:54:37            23:15   \n",
            "69990  '10443720000552311  03/30/2024  03/31/2024 06:54:37            23:30   \n",
            "69991  '10443720000552311  03/30/2024  03/31/2024 06:54:37            23:45   \n",
            "\n",
            "      USAGE_END_TIME  USAGE_KWH ESTIMATED_ACTUAL CONSUMPTION_SURPLUSGENERATION  \n",
            "69987          23:00     136.80                A                   Consumption  \n",
            "69988          23:15     131.76                A                   Consumption  \n",
            "69989          23:30     129.60                A                   Consumption  \n",
            "69990          23:45     130.32                A                   Consumption  \n",
            "69991          00:00     130.32                A                   Consumption  \n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          USAGE_KWH\n",
              "count  69984.000000\n",
              "mean     242.296830\n",
              "std       92.178187\n",
              "min        0.000000\n",
              "25%      164.160000\n",
              "50%      226.800000\n",
              "75%      303.840000\n",
              "max      597.600000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8f7c27d6-552d-4f55-ba4a-771732c0b90b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>USAGE_KWH</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>69984.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>242.296830</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>92.178187</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>164.160000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>226.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>303.840000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>597.600000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f7c27d6-552d-4f55-ba4a-771732c0b90b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8f7c27d6-552d-4f55-ba4a-771732c0b90b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8f7c27d6-552d-4f55-ba4a-771732c0b90b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8c35ef95-6482-418e-acdc-3efcbdee3aaf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8c35ef95-6482-418e-acdc-3efcbdee3aaf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8c35ef95-6482-418e-acdc-3efcbdee3aaf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"investigate_data(site,n=5)\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"USAGE_KWH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24661.539212330852,\n        \"min\": 0.0,\n        \"max\": 69984.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          242.29682956104247,\n          226.8,\n          69984.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 149
        }
      ],
      "source": [
        "# Create Investigate Data Function and run the function on the three dataframes.\n",
        "def investigate_data(df, n=5):\n",
        "    \"\"\"Displays the basic info about, shape, number of duplicates,\n",
        "    missing values, and descriptive statistics of the input data\n",
        "    Parameters:\n",
        "        df: data as a dataframe\n",
        "        n: (int) size of the sample you want to view\n",
        "    Returns:\n",
        "        descriptive statistics about the data.\n",
        "        Also prints other relevant info about the data such as shape, number of duplicates, and a small sample.\n",
        "    \"\"\"\n",
        "\n",
        "    print(f'{df.info()}\\n')\n",
        "    print(f'The shape of the data frame is {df.shape}\\n')\n",
        "    print(f'The number of duplicate rows is: {df.duplicated().sum()}\\n')\n",
        "    print(f\"Columns sorted by number of missing values:\\n{df.isnull().sum().sort_values(ascending=False)}\\n\")\n",
        "    print(f\"Missing values as a percentage of the length of the dataframe:\\n{(df.isnull().sum().sort_values(ascending=False))/len(df)}\\n\")\n",
        "    print(f'Here are the first {n} entries of our data:\\n {df.head(n)}\\n')\n",
        "    print(f'Here are the last {n} entries of our data:\\n {df.tail(n)}\\n')\n",
        "    return df.describe()\n",
        "\n",
        "investigate_data(site,n=5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 150,
      "metadata": {
        "id": "8uLnslcD9rQw"
      },
      "outputs": [],
      "source": [
        "# Function to process ESI_ID file\n",
        "def ESI_ID_PROCESSOR(df):\n",
        "  \"\"\"\n",
        "  Processes ESI_ID df date and time info into one DATE_TIME column.\n",
        "  Cleans ESI_ID df to include only the three needed columns.\n",
        "  Replaces any missing values for USAGE with the previous value.\n",
        "  \"\"\"\n",
        "  columns_needed = ['USAGE_DATE', 'USAGE_START_TIME', 'USAGE_KWH'] # Keep only the date, time and usage columns\n",
        "  df = df[columns_needed]\n",
        "  df['USAGE_KWH'] = df['USAGE_KWH'].fillna(method='ffill') # Fill NaN with previous value.\n",
        "  df['USAGE_DATE']=pd.to_datetime(df['USAGE_DATE']) # Convert and combine dates and times\n",
        "  df['USAGE_DATE']=pd.to_datetime(df['USAGE_DATE'], format='%m/%d/%y')\n",
        "  df['USAGE_START_TIME']=pd.to_datetime(df['USAGE_START_TIME']) # Combine date and time into one column\n",
        "  df['DATE_TIME'] = df['USAGE_DATE'] + pd.to_timedelta(df['USAGE_START_TIME'].dt.strftime('%H:%M:%S'))\n",
        "  df = df[['DATE_TIME', 'USAGE_KWH']]\n",
        "  return(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 151,
      "metadata": {
        "id": "dEfichDA6U3e"
      },
      "outputs": [],
      "source": [
        "# Process ESI_ID\n",
        "site = ESI_ID_PROCESSOR(site)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 152,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MLVY7sE-Nkeb",
        "outputId": "72588684-d13b-4ea5-8be9-192788d4ca31"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "The USAGE_KWH from the four peak times from the prior year were:\n",
            "\n",
            "  PEAK_MONTH           DATE_TIME  USAGE_KWH\n",
            "0       June 2022-06-23 17:00:00     411.84\n",
            "1       July 2022-07-20 16:45:00     414.72\n",
            "2     August 2022-08-02 17:00:00     397.44\n",
            "3  September 2022-09-20 17:00:00     419.76\n",
            "\n",
            "The average usage of the four peaks:\n",
            "410.94 KWH\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# 4CP FOUR PEAKS  2022\n",
        "# Calculate 4CP based on the known four peaks from the prior year.\n",
        "# June 6/23/2022 17:00 , July 7/20/2022 16:45, August 8/02/2022 17:00, September 9/20/2022 17:00\n",
        "four_peaks_22 = {\n",
        "    'PEAK_MONTH': ['June', 'July', 'August', 'September'],\n",
        "    'PEAK_DATE': ['2022-06-23', '2022-07-20', '2022-08-02', '2022-09-20'],\n",
        "    'PEAK_TIME': ['17:00', '16:45', '17:00', '17:00']}\n",
        "\n",
        "# Convert to datetime format\n",
        "four_peaks_22['PEAK_DATE'] = pd.to_datetime(four_peaks_22['PEAK_DATE'])\n",
        "four_peaks_22['PEAK_TIME'] = pd.to_datetime(four_peaks_22['PEAK_TIME'])\n",
        "\n",
        "# Creating DataFrame for four peaks in 2022\n",
        "four_peaks_22 = pd.DataFrame(four_peaks_22)\n",
        "four_peaks_22['DATE_TIME'] = four_peaks_22['PEAK_DATE'] + pd.to_timedelta(four_peaks_22['PEAK_TIME'].dt.strftime('%H:%M:%S'))\n",
        "columns_wanted_22 = ['PEAK_MONTH', 'DATE_TIME']\n",
        "four_peaks_22 = four_peaks_22[columns_wanted_22]\n",
        "\n",
        "# Merge the four_peaks_22 df to the site df and only keep those four rows they have in common.\n",
        "merged_22 = pd.merge(four_peaks_22, site, on='DATE_TIME')\n",
        "print()\n",
        "print('The USAGE_KWH from the four peak times from the prior year were:')\n",
        "print()\n",
        "print(merged_22)\n",
        "print()\n",
        "\n",
        "# Calculate average for 4CP\n",
        "four_peak_22_avg_4CP = merged_22['USAGE_KWH'].mean()\n",
        "print('The average usage of the four peaks:')\n",
        "print(four_peak_22_avg_4CP,'KWH')\n",
        "print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 153,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hta1ZM03VnCq",
        "outputId": "623d8087-e9c0-45dc-86e3-16bd0be79f7f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "The USAGE_KWH from the four peak times from the prior year were:\n",
            "\n",
            "  PEAK_MONTH           DATE_TIME  USAGE_KWH\n",
            "0       June 2023-06-27 17:00:00     456.48\n",
            "1       July 2023-07-31 17:00:00     429.12\n",
            "2     August 2023-08-10 17:00:00     418.32\n",
            "3  September 2023-09-08 16:45:00     388.08\n",
            "\n",
            "The average usage of the four peaks:\n",
            "423.0 KWH\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# 4CP FOUR PEAKS 2023\n",
        "# Calculate 4CP based on the known four peaks from the prior year.\n",
        "# June 6/27/2023 17:00, July 7/31/2023 17:00, August 8/10/2023 17:00, September 9/08/2023 16:45\n",
        "four_peaks_23 = {\n",
        "    'PEAK_MONTH': ['June', 'July', 'August', 'September'],\n",
        "    'PEAK_DATE': ['2023-06-27', '2023-07-31', '2023-08-10', '2023-09-08'],\n",
        "    'PEAK_TIME': ['17:00', '17:00', '17:00', '16:45']}\n",
        "\n",
        "# Convert to datetime format\n",
        "four_peaks_23['PEAK_DATE'] = pd.to_datetime(four_peaks_23['PEAK_DATE'])\n",
        "four_peaks_23['PEAK_TIME'] = pd.to_datetime(four_peaks_23['PEAK_TIME'])\n",
        "\n",
        "# Creating DataFrame for four peaks in 2023\n",
        "four_peaks_23 = pd.DataFrame(four_peaks_23)\n",
        "four_peaks_23['DATE_TIME'] = four_peaks_23['PEAK_DATE'] + pd.to_timedelta(four_peaks_23['PEAK_TIME'].dt.strftime('%H:%M:%S'))\n",
        "columns_wanted_23 = ['PEAK_MONTH', 'DATE_TIME']\n",
        "four_peaks_23 = four_peaks_23[columns_wanted_23]\n",
        "\n",
        "# Merge the four_peaks_23 df to the site df and only keep those four rows they have in common.\n",
        "merged_23 = pd.merge(four_peaks_23, site, on='DATE_TIME')\n",
        "print()\n",
        "print('The USAGE_KWH from the four peak times from the prior year were:')\n",
        "print()\n",
        "print(merged_23)\n",
        "print()\n",
        "\n",
        "# Calculate average for 4CP\n",
        "four_peak_23_avg_4CP = merged_23['USAGE_KWH'].mean()\n",
        "print('The average usage of the four peaks:')\n",
        "print(four_peak_23_avg_4CP,'KWH')\n",
        "print()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 154,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ykkbIJyf0Aw",
        "outputId": "04a283a2-360c-4c6b-fde4-a730150e4ce7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 69992 entries, 0 to 69991\n",
            "Data columns (total 2 columns):\n",
            " #   Column     Non-Null Count  Dtype         \n",
            "---  ------     --------------  -----         \n",
            " 0   DATE_TIME  69992 non-null  datetime64[ns]\n",
            " 1   USAGE_KWH  69992 non-null  float64       \n",
            "dtypes: datetime64[ns](1), float64(1)\n",
            "memory usage: 1.1 MB\n",
            "   YEAR_MONTH  FIXED_COST\n",
            "0     2022-04         NaN\n",
            "1     2022-05    49201.65\n",
            "2     2022-06    52638.04\n",
            "3     2022-07    54991.19\n",
            "4     2022-08    58643.45\n",
            "5     2022-09    51316.93\n",
            "6     2022-10    44599.73\n",
            "7     2022-11    42581.76\n",
            "8     2022-12    43437.41\n",
            "9     2023-01    42204.13\n",
            "10    2023-02    41527.20\n",
            "11    2023-03    40928.19\n",
            "12    2023-04    41441.04\n",
            "13    2023-05    44428.08\n",
            "14    2023-06    50847.92\n",
            "15    2023-07    55427.61\n",
            "16    2023-08    60808.28\n",
            "17    2023-09    54609.51\n",
            "18    2023-10    47484.61\n",
            "19    2023-11    41440.35\n",
            "20    2023-12    37414.48\n",
            "21    2024-01    45241.49\n",
            "22    2024-02    41324.11\n",
            "23    2024-03    40429.72\n"
          ]
        }
      ],
      "source": [
        "# Create dataframe for the time period to analyze\n",
        "time_period = site[(site['DATE_TIME'] >= year_start)]\n",
        "time_period.info()\n",
        "result_data = []\n",
        "\n",
        "# Iterate through the DATE_TIME column\n",
        "for year_month, group in time_period.groupby(time_period['DATE_TIME'].dt.to_period('M')):\n",
        "    # Calculate the sum for each month\n",
        "    month_sum = group['USAGE_KWH'].sum()\n",
        "    # Find peak for each month\n",
        "    month_peak = group['USAGE_KWH'].max()\n",
        "    # Calculate eleven_mo_max_80_percent\n",
        "    # Define the end date (first day of month)\n",
        "    end_date = pd.to_datetime(group['DATE_TIME'].iloc[0])\n",
        "    # Calculate the start date (11 months prior to month)\n",
        "    start_date = end_date - pd.DateOffset(months=11)\n",
        "    # Filter DataFrame for rows within the prior 11 months from the first of the month\n",
        "    eleven_months_prior = site[(site['DATE_TIME'] >= start_date) & (site['DATE_TIME'] < end_date)]\n",
        "    # Find maximum over prior 11 months and multiply by 80%\n",
        "    eleven_mo_max_80_percent = eleven_months_prior['USAGE_KWH'].max()*.8\n",
        "    # Previous Calendar Year four peak average\n",
        "    if pd.to_datetime(year_month.to_timestamp()) >= pd.to_datetime('2024-01-01 00:00:00'):\n",
        "      demand_4cp=four_peak_23_avg_4CP\n",
        "    else:\n",
        "       demand_4cp=four_peak_22_avg_4CP\n",
        "    # Which is greater: month_peak or eleven_mo_max_80_percent ?\n",
        "    billed_max = max(eleven_mo_max_80_percent,month_peak)\n",
        "\n",
        "   # Append the result to the list\n",
        "    result_data.append({'YEAR_MONTH': year_month, 'Peak for Month': month_peak,\n",
        "                        '80 percent of prior 11 mo max': eleven_mo_max_80_percent,\n",
        "                        '4CP Demand': demand_4cp.round(2), 'Total Month Consumption KWH': month_sum.round(2),\n",
        "                        'Billed Demand Cost $': (K6_4CP.loc['Sum of Billed Demand Cost $']*billed_max*4).round(2),\n",
        "                        '4CP Cost $': (K6_4CP.loc['Sum of 4CP Demand Cost $']*demand_4cp*4).round(2),\n",
        "                        'Consumption Cost $': (K6_4CP.loc['Sum of kWh Cost $']*month_sum).round(2),\n",
        "                        'Flat Charges $': K6_4CP.loc['Sum of Flat Charges $'],\n",
        "                        'Tax Rate %': K6_4CP.loc['Sum of Tax Rates %'],\n",
        "                        'FIXED_COST': (((K6_4CP.loc['Sum of Billed Demand Cost $']*billed_max*4) +\n",
        "                         (K6_4CP.loc['Sum of 4CP Demand Cost $']*demand_4cp*4) +\n",
        "                                         (K6_4CP.loc['Sum of kWh Cost $']*month_sum) +\n",
        "                                         (K6_4CP.loc['Sum of Flat Charges $']))*(1+(K6_4CP.loc['Sum of Tax Rates %']/100))).round(2)\n",
        " })\n",
        "\n",
        "# Create a DataFrame from the list of results\n",
        "fixed_df = pd.DataFrame(result_data)\n",
        "\n",
        "# Display the resulting DataFrame\n",
        "print(fixed_df[['YEAR_MONTH', 'FIXED_COST']])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Real time pricing model"
      ],
      "metadata": {
        "id": "Lfaxe_D2-QY3"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 155,
      "metadata": {
        "id": "DX9RLi1-9Tfk"
      },
      "outputs": [],
      "source": [
        "# Import real time pricing csv file\n",
        "factor_rep = 1 # Multiple to adjust for the extra customer would need to pay the Retail Electric Provider (REP)\n",
        "real_df = pd.read_csv('North Zone Prices(Interval Data).csv')\n",
        "real_df = real_df[['deliveryDate', 'deliveryHour', 'deliveryInterval', 'settlementPointPrice']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 156,
      "metadata": {
        "id": "4haJFshI94gy"
      },
      "outputs": [],
      "source": [
        "# Function to process real time pricing df\n",
        "def real_time_processor(df):\n",
        "  \"\"\"\n",
        "  Keep needed columns.\n",
        "  Convert to datetime.\n",
        "  \"\"\"\n",
        "  df.columns = ['Date', 'Hour', 'QuarterHour', 'settlementPointPrice'] # Remove unnecessary columns\n",
        "  df['Hour'] = df['Hour']-1 # Convert Hour to 0-23 where 1 goes to 0... 24 to 23.\n",
        "  # Convert QuarterHour times. Define the mapping\n",
        "  time_mapping = {1: '00:00', 2: '15:00', 3: '30:00', 4: '45:00'}\n",
        "  df['QuarterHour'] = df['QuarterHour'].map(time_mapping) # Map the QuarterHour values to time strings\n",
        "  df['DATE_TIME'] = pd.to_datetime(df['Date'].astype(str) + ' ' + df['Hour'].astype(str) + ':' + df['QuarterHour']) # Convert to Datetime column\n",
        "  # Drop intermediate columns if needed\n",
        "  df = df.drop(columns=['Hour', 'QuarterHour', 'Date'])\n",
        "  # Sort the DataFrame by the Datetime column\n",
        "  df = df.sort_values(by='DATE_TIME').reset_index(drop=True)\n",
        "  df = df.rename(columns={'settlementPointPrice': 'REAL_TIME_PRICE'})\n",
        "  df=df[['DATE_TIME'] + [col for col in df.columns if col != 'DATE_TIME']]\n",
        "  # Convert to MWH\n",
        "  return(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 157,
      "metadata": {
        "id": "R-o-4MWL_4Ds",
        "outputId": "00f3eca9-a738-46d6-a670-25f41562115e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                DATE_TIME  REAL_TIME_PRICE\n",
              "21390 2023-09-06 19:30:00          5296.29\n",
              "21391 2023-09-06 19:45:00          5225.82\n",
              "21389 2023-09-06 19:15:00          5210.90\n",
              "13905 2023-06-20 20:15:00          5205.06\n",
              "19470 2023-08-17 19:30:00          5193.14\n",
              "19471 2023-08-17 19:45:00          5192.22\n",
              "19469 2023-08-17 19:15:00          5192.10\n",
              "21388 2023-09-06 19:00:00          5186.35\n",
              "19468 2023-08-17 19:00:00          5145.12\n",
              "19473 2023-08-17 20:15:00          5145.07"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-878521e2-3fba-4a3b-9415-3552a828f8c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DATE_TIME</th>\n",
              "      <th>REAL_TIME_PRICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>21390</th>\n",
              "      <td>2023-09-06 19:30:00</td>\n",
              "      <td>5296.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21391</th>\n",
              "      <td>2023-09-06 19:45:00</td>\n",
              "      <td>5225.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21389</th>\n",
              "      <td>2023-09-06 19:15:00</td>\n",
              "      <td>5210.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13905</th>\n",
              "      <td>2023-06-20 20:15:00</td>\n",
              "      <td>5205.06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19470</th>\n",
              "      <td>2023-08-17 19:30:00</td>\n",
              "      <td>5193.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19471</th>\n",
              "      <td>2023-08-17 19:45:00</td>\n",
              "      <td>5192.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19469</th>\n",
              "      <td>2023-08-17 19:15:00</td>\n",
              "      <td>5192.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21388</th>\n",
              "      <td>2023-09-06 19:00:00</td>\n",
              "      <td>5186.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19468</th>\n",
              "      <td>2023-08-17 19:00:00</td>\n",
              "      <td>5145.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19473</th>\n",
              "      <td>2023-08-17 20:15:00</td>\n",
              "      <td>5145.07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-878521e2-3fba-4a3b-9415-3552a828f8c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-878521e2-3fba-4a3b-9415-3552a828f8c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-878521e2-3fba-4a3b-9415-3552a828f8c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-797ce9b6-1955-4b7f-903a-9bd2a0effca2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-797ce9b6-1955-4b7f-903a-9bd2a0effca2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-797ce9b6-1955-4b7f-903a-9bd2a0effca2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"real_df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"DATE_TIME\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-06-20 20:15:00\",\n        \"max\": \"2023-09-06 19:45:00\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"2023-08-17 19:00:00\",\n          \"2023-09-06 19:45:00\",\n          \"2023-08-17 19:45:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"REAL_TIME_PRICE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42.76811040691156,\n        \"min\": 5145.07,\n        \"max\": 5296.29,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5145.12,\n          5225.82,\n          5192.22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 157
        }
      ],
      "source": [
        "# Run processor function on real time price df\n",
        "real_df = real_time_processor(real_df)\n",
        "real_df.sort_values(by='REAL_TIME_PRICE', ascending=False).head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 158,
      "metadata": {
        "id": "oMuwBEhWnAjF"
      },
      "outputs": [],
      "source": [
        "# Merge kwh and pricing\n",
        "merged_df = pd.merge(real_df, site, on='DATE_TIME', how='inner')\n",
        "merged_df['USAGE_MWH'] = merged_df['USAGE_KWH']/1000\n",
        "merged_df = merged_df.drop('USAGE_KWH', axis=1)\n",
        "\n",
        "# Multiply price times MWH Usage\n",
        "merged_df['REAL_TIME_COST'] = factor_rep*merged_df['USAGE_MWH']*merged_df['REAL_TIME_PRICE']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 159,
      "metadata": {
        "id": "wdxsnVBlszA6"
      },
      "outputs": [],
      "source": [
        "# Monthly Real Time Cost\n",
        "real_monthly_series = merged_df.groupby(merged_df['DATE_TIME'].dt.to_period('M'))['REAL_TIME_COST'].sum()\n",
        "real_monthly_df = real_monthly_series.reset_index()\n",
        "real_monthly_df.columns = ['YEAR_MONTH', 'REAL_TIME_COST']"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Merge Fixed and Real df's\n",
        "final_df = pd.merge(real_monthly_df, fixed_df, on='YEAR_MONTH', how='inner')\n",
        "final_df = final_df[['YEAR_MONTH', 'REAL_TIME_COST', 'FIXED_COST']]\n",
        "final_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "DdCd-Bo2GViP",
        "outputId": "f0ff4e90-65ce-42ef-8b20-08c078f147b2"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   YEAR_MONTH  REAL_TIME_COST  FIXED_COST\n",
              "0     2023-01     5187.125196    42204.13\n",
              "1     2023-02    11039.757566    41527.20\n",
              "2     2023-03    15422.242126    40928.19\n",
              "3     2023-04    12450.507530    41441.04\n",
              "4     2023-05    20770.200130    44428.08\n",
              "5     2023-06    67019.736254    50847.92\n",
              "6     2023-07    45113.485198    55427.61\n",
              "7     2023-08   221433.473887    60808.28\n",
              "8     2023-09    95629.866350    54609.51\n",
              "9     2023-10    20486.067948    47484.61\n",
              "10    2023-11    17293.130726    41440.35\n",
              "11    2023-12    10157.659308    37414.48\n",
              "12    2024-01    24370.123982    45241.49\n",
              "13    2024-02     8517.418279    41324.11\n",
              "14    2024-03    10361.497457    40429.72"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e830b46c-ef1d-4dbc-9a9b-0c73579924b5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>YEAR_MONTH</th>\n",
              "      <th>REAL_TIME_COST</th>\n",
              "      <th>FIXED_COST</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2023-01</td>\n",
              "      <td>5187.125196</td>\n",
              "      <td>42204.13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2023-02</td>\n",
              "      <td>11039.757566</td>\n",
              "      <td>41527.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2023-03</td>\n",
              "      <td>15422.242126</td>\n",
              "      <td>40928.19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2023-04</td>\n",
              "      <td>12450.507530</td>\n",
              "      <td>41441.04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2023-05</td>\n",
              "      <td>20770.200130</td>\n",
              "      <td>44428.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2023-06</td>\n",
              "      <td>67019.736254</td>\n",
              "      <td>50847.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2023-07</td>\n",
              "      <td>45113.485198</td>\n",
              "      <td>55427.61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2023-08</td>\n",
              "      <td>221433.473887</td>\n",
              "      <td>60808.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2023-09</td>\n",
              "      <td>95629.866350</td>\n",
              "      <td>54609.51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2023-10</td>\n",
              "      <td>20486.067948</td>\n",
              "      <td>47484.61</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2023-11</td>\n",
              "      <td>17293.130726</td>\n",
              "      <td>41440.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2023-12</td>\n",
              "      <td>10157.659308</td>\n",
              "      <td>37414.48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2024-01</td>\n",
              "      <td>24370.123982</td>\n",
              "      <td>45241.49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2024-02</td>\n",
              "      <td>8517.418279</td>\n",
              "      <td>41324.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2024-03</td>\n",
              "      <td>10361.497457</td>\n",
              "      <td>40429.72</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e830b46c-ef1d-4dbc-9a9b-0c73579924b5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e830b46c-ef1d-4dbc-9a9b-0c73579924b5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e830b46c-ef1d-4dbc-9a9b-0c73579924b5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3bb2d21c-da80-4e3e-bc9a-bc713d01147c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3bb2d21c-da80-4e3e-bc9a-bc713d01147c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3bb2d21c-da80-4e3e-bc9a-bc713d01147c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9c06757c-5354-4517-9921-20ed5c6d3973\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('final_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9c06757c-5354-4517-9921-20ed5c6d3973 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('final_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "final_df",
              "summary": "{\n  \"name\": \"final_df\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"YEAR_MONTH\",\n      \"properties\": {\n        \"dtype\": \"period[M]\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"2023-10\",\n          \"2023-12\",\n          \"2023-01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"REAL_TIME_COST\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56340.04353250907,\n        \"min\": 5187.125196,\n        \"max\": 221433.4738872,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          20486.067948,\n          10157.659308,\n          5187.125196\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FIXED_COST\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6750.876144918277,\n        \"min\": 37414.48,\n        \"max\": 60808.28,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          47484.61,\n          37414.48,\n          42204.13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert YEAR_MONTH to timestamp format\n",
        "final_df['YEAR_MONTH'] = final_df['YEAR_MONTH'].dt.to_timestamp()\n",
        "\n",
        "# Now, convert to datetime format\n",
        "final_df['YEAR_MONTH'] = pd.to_datetime(final_df['YEAR_MONTH'], format='%Y-%m')\n",
        "\n",
        "# Plotting the data using plotly express\n",
        "fig = px.line(final_df, x='YEAR_MONTH', y=['REAL_TIME_COST', 'FIXED_COST'], markers=True,\n",
        "              labels={'value': 'Cost', 'YEAR_MONTH': 'Date'},\n",
        "              title='Real Time Cost vs Fixed Cost Over Time')\n",
        "\n",
        "# Update layout for better visualization\n",
        "fig.update_layout(\n",
        "    xaxis_title='Date',\n",
        "    yaxis_title='Cost',\n",
        "    legend_title='Cost Type',\n",
        "    xaxis=dict(\n",
        "        tickformat=\"%Y-%m\"  # Format x-axis labels to show only year and month\n",
        "    )\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "2n96z5N7m9l-",
        "outputId": "5102bc51-253d-404d-d845-3d1bf83b1f9f"
      },
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"d0809445-7dbc-481f-8d90-0eaf1e55dd08\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d0809445-7dbc-481f-8d90-0eaf1e55dd08\")) {                    Plotly.newPlot(                        \"d0809445-7dbc-481f-8d90-0eaf1e55dd08\",                        [{\"hovertemplate\":\"variable=REAL_TIME_COST\\u003cbr\\u003eDate=%{x}\\u003cbr\\u003eCost=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"REAL_TIME_COST\",\"line\":{\"color\":\"#636efa\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"REAL_TIME_COST\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"2023-01-01T00:00:00\",\"2023-02-01T00:00:00\",\"2023-03-01T00:00:00\",\"2023-04-01T00:00:00\",\"2023-05-01T00:00:00\",\"2023-06-01T00:00:00\",\"2023-07-01T00:00:00\",\"2023-08-01T00:00:00\",\"2023-09-01T00:00:00\",\"2023-10-01T00:00:00\",\"2023-11-01T00:00:00\",\"2023-12-01T00:00:00\",\"2024-01-01T00:00:00\",\"2024-02-01T00:00:00\",\"2024-03-01T00:00:00\"],\"xaxis\":\"x\",\"y\":[5187.125196,11039.7575664,15422.2421256,12450.5075304,20770.2001296,67019.7362544,45113.4851976,221433.4738872,95629.8663504,20486.067948,17293.1307264,10157.659308,24370.1239824,8517.4182792,10361.4974568],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"variable=FIXED_COST\\u003cbr\\u003eDate=%{x}\\u003cbr\\u003eCost=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"FIXED_COST\",\"line\":{\"color\":\"#EF553B\",\"dash\":\"solid\"},\"marker\":{\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"FIXED_COST\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[\"2023-01-01T00:00:00\",\"2023-02-01T00:00:00\",\"2023-03-01T00:00:00\",\"2023-04-01T00:00:00\",\"2023-05-01T00:00:00\",\"2023-06-01T00:00:00\",\"2023-07-01T00:00:00\",\"2023-08-01T00:00:00\",\"2023-09-01T00:00:00\",\"2023-10-01T00:00:00\",\"2023-11-01T00:00:00\",\"2023-12-01T00:00:00\",\"2024-01-01T00:00:00\",\"2024-02-01T00:00:00\",\"2024-03-01T00:00:00\"],\"xaxis\":\"x\",\"y\":[42204.13,41527.2,40928.19,41441.04,44428.08,50847.92,55427.61,60808.28,54609.51,47484.61,41440.35,37414.48,45241.49,41324.11,40429.72],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Date\"},\"tickformat\":\"%Y-%m\"},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Cost\"}},\"legend\":{\"title\":{\"text\":\"Cost Type\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Real Time Cost vs Fixed Cost Over Time\"}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('d0809445-7dbc-481f-8d90-0eaf1e55dd08');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}